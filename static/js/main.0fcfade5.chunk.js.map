{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["quotes","require","RandomQuoteComponent","state","quote","url","new_quote","bind","this","fetch_quotes","setState","get_random_quote","set_tweet_url","parseInt","Math","random","length","e","preventDefault","q","author","text","encodeURI","encoded","className","id","onClick","href","target","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"29YAEMA,EAASC,EAAQ,IAAiBD,OAqFzBE,E,kDAjFX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTH,OAAQ,GACRI,MAAO,GACPC,IAAK,IAET,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAPP,E,qDAUd,WACI,IAAIP,EAASQ,KAAKC,eAElBD,KAAKE,SAAS,CACVV,WAEJ,IAAII,EAAQI,KAAKG,iBAAiBX,GAClCQ,KAAKE,SAAS,CACVN,UAEJI,KAAKI,cAAcR,K,0BAIvB,WACI,OAAOJ,I,8BAGX,SAAkBA,GAEd,OAAOA,EADGa,SAASC,KAAKC,SAAWf,EAAOgB,W,uBAK9C,SAAUC,GACNA,EAAEC,iBACF,IAAId,EAAQI,KAAKG,iBAAiBH,KAAKL,MAAMH,QAC7CQ,KAAKE,SAAS,CACVN,UAEJI,KAAKI,cAAcR,K,2BAGvB,SAAcA,GACV,IAAIe,EAAIf,EAAMA,MACVgB,EAAShB,EAAMgB,OACfC,EAAOC,UAAU,IAAD,OAAKH,EAAL,aAAWC,IAC3BG,EAAO,qFAAiFF,GAE5Fb,KAAKE,SAAS,CACVL,IAAKkB,M,oBAKb,WACI,OACI,qBAAKC,UAAU,YAAf,SACI,qBAAKA,UAAU,gCAAf,SACI,sBAAKC,GAAG,YAAYD,UAAU,OAA9B,UACI,qBAAKA,UAAU,YAAf,SACI,mBAAGC,GAAG,OAAN,SAAcjB,KAAKL,MAAMC,MAAMA,UAEnC,qBAAIqB,GAAG,SAAP,cAAkBjB,KAAKL,MAAMC,MAAMgB,UACnC,sBAAKI,UAAU,YAAf,UACI,mBAAGA,UAAU,kBAAkBC,GAAG,YAAYC,QAASlB,KAAKF,UAAWqB,KAAK,IAA5E,uBACA,mBAAGH,UAAU,kBAAkBC,GAAG,cAAeG,OAAO,SAAUD,KAAMnB,KAAKL,MAAME,IAAnF,uC,GAnEOwB,IAAMC,WCO1BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0fcfade5.chunk.js","sourcesContent":["import './App.css';\nimport React from \"react\";\nconst quotes = require('./quotes.json').quotes\n\n\nclass RandomQuoteComponent extends React.Component{\n    constructor() {\n        super();\n        this.state = {\n            quotes: [],\n            quote: \"\",\n            url: \"\"\n        }\n        this.new_quote = this.new_quote.bind(this)\n\n    }\n    componentDidMount() {\n        let quotes = this.fetch_quotes()\n\n        this.setState({\n            quotes\n        })\n        let quote = this.get_random_quote(quotes)\n        this.setState({\n            quote,\n        })\n        this.set_tweet_url(quote)\n\n    }\n\n    fetch_quotes(){\n        return quotes\n    }\n\n    get_random_quote (quotes) {\n        let idx = parseInt(Math.random() * quotes.length)\n        return quotes[idx]\n\n    }\n\n    new_quote(e){\n        e.preventDefault()\n        let quote = this.get_random_quote(this.state.quotes)\n        this.setState({\n            quote\n        })\n        this.set_tweet_url(quote)\n    }\n\n    set_tweet_url(quote){\n        let q = quote.quote;\n        let author = quote.author;\n        let text = encodeURI(`\"${q}\" ${author}`)\n        let encoded = `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${text}`;\n        // https://twitter.com/intent/tweet?hashtags=quotes&amp;related=freecodecamp&amp;text=%22I%20have%20learned%20over%20the%20years%20that%20when%20one%E2%80%99s%20mind%20is%20made%20up%2C%20this%20diminishes%20fear.%22%20Rosa%20Parks\n        this.setState({\n            url: encoded\n        })\n\n    }\n\n    render(){\n        return (\n            <div className=\"container\">\n                <div className=\"row justify-content-md-center\">\n                    <div id=\"quote-box\" className=\"card\">\n                        <div className=\"card-body\">\n                            <p id=\"text\">{this.state.quote.quote}</p>\n                        </div>\n                        <em id=\"author\">-{this.state.quote.author}</em>\n                        <div className=\"btn-group\">\n                            <a className=\"btn btn-primary\" id=\"new-quote\" onClick={this.new_quote} href=\"#\">new quote</a>\n                            <a className=\"btn btn-success\" id=\"tweet-quote\"  target=\"_blank\"  href={this.state.url}>tweet quote</a>\n                        </div>\n\n\n                    </div>\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\n\n\nexport default RandomQuoteComponent;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}